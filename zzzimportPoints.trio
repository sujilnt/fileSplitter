
name:zzzimportPoints
func
src:
  (site) => do
      acc:{}
    //s is site to import points to
    
      // function used to add our new records
    addRec: (msg, tags) => do
  
      // log an info message
      logInfo("import", msg)
  
      // filter out any null or empty string tags
      tags = tags.findAll x => x != null and x != ""
      
            // check if record esists if not add as new record to the database
        if (read(dis == tags["dis"]  and siteRef  == tags["siteRef"] and equipRef == tags["equipRef"],false) == null) do
      commit(diff(null, tags, {add}))
  end
    end
    
    
  
    pointNameToTags: {
      r"Demand":           {power, sensor},
      r"Consumption":      {energy, sensor},
      r"SupplyFan":        {supply, air, fan, cmd},
      r"SupplyA?i?r?Temp": {supply, air, temp, sensor},
      r"ReturnA?i?r?Temp": {"return", air, temp, sensor},
      r"FanSpeed":         {fan, air, speed},
      r"RoomStatus":       {room, status},
      r"Fanstatus":        {air,fan, sensor},
      r"Schedule":          {cmd},
      r"Control":          {cmd},
      r"Boiler1?Temp": {flow,temp, sensor},
      r"HW Return Temp": {"return", temp, sensor},    
      r"HW Supply Temp": {flow, temp, sensor},    
      r"HW SP": {temp, cmd, setpoint}, 
      r"Boiler1?Run": {sensor},    
      r"Boiler1?En": {cmd},
      r"FlowTemp": {flow, temp, sensor},
      r"$Delta Pressure": {pressure, sensor},
      r"ReturnTemp": {"return", temp, sensor},
      r"$Delta Pressure SP": {pressure, cmd},
      r"$Ena?b?l?e?": {cmd},
      r"$Flow": {sensor},
      r"$VFD": {speed, cmd},
      r"Boiler\s1?\sEn": {cmd},
      r"Boiler\s1?\sRun": {sensor},
      r"Chiller\s1?\sEn": {cmd},
      r"chiller\s1?\sRun": {sensor},    
      r"Cool-(\d+)":       {cool, stage:(groups)=>groups[1].parseNumber, cmd},
      r"Heat-(\d+)":       {heat, stage:(groups)=>groups[1].parseNumber, cmd},
    }
        applyTagsByRegex: (mapping, name, tags) => do
        // check for every match in mapping dict of regex:tags
        mapping.each((tagsToAdd,regex) => do
        // we had a match, walk thru each tagToAdd and add it to tags; 
        // if the tag value is a function then call the function with reGroups
        if (regex.reMatches(name)) do
          tagsToAdd.each((v, n) => do
            if (v.isFunc()) 
              v = v(reGroups(regex, name))
              tags = tags.set(n, v)
            end)
          end
        end)
        // return potentially updated tags
        return tags
      end
  
    
  
    // function to map point list to point records
    mapPoints: () => do
  
      pointsFile.each row => do
  
        // parse point name from path column
        equipName: row->axHistoryId.split("/")[-2].split("_")[-1]
        pointName: row->axHistoryId.split("/")[-1]
        //pointName: row->dis
  
        // associate with site via storeNum
        site: read(site and dis == site)
  
        // associate with equip via dis
        equip: read(equip and dis == site->dis + " " + equipName)
  
        // map string cells to typed tags
        //f: row[unit]
        //    if(row[unit] != null) echo(row[unit])
        tags: {
          dis:      site->dis + " " + equipName + " " + pointName,
          siteRef:  site->id,
          equipRef: equip->id,
          kind:     row->kind,
          tz:       site->tz,
          point,
          his,
          haystackHis: row->id.toStr,
          haystackConnRef: read(haystackConn)->id,
          connRef: read(haystackConn)->id,
          unit: if(row.has("unit")) row->unit
        }
  
        // if kind is Number, we must have unit column
  //      if (tags->kind == "Number")
    //     tags = tags.set("unit", parseUnit(row->unit))
  
        // check if point name matches one of our regular expressions
        tags = applyTagsByRegex(pointNameToTags, pointName, tags)
        acc = acc.set(tags->dis,tags)
      end
      return acc.vals
    end 
    
    // function to import the points
    importPoints: () => do
      //echo(mapPoints())
      mapPoints().each row => addRec("Add point: " + row->dis, row)
    end  
   
    // import files we will use
    hc: read(haystackConn)->id
    // pointsFile: hc.haystackReadAll(point and cur)
     
        pointsFile: hc.haystackReadAll(his and kind == "Number").findAll(row => row->dis.contains(site))
    importPoints()       // map points CSV and add points recs
  //  readAll(imported)    // return everything we added
  acc.vals
  end
  
  
  

---