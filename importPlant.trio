
name:importPlant
func
src:
  (siteSel) => do
    // s is site to import the equipment to
   acc: {}
      plantNameToTags: {
      r"ElecMeter":  {elec, meter, siteMeter},
      r"RTU-(\d+)":  {ahu},
      r"AHU(\d+)":  {ahu},
      r"CHW": {chiller}
    }   
      applyTagsByRegex: (mapping, name, tags) => do
        // check for every match in mapping dict of regex:tags
        mapping.each((tagsToAdd,regex) => do
        // we had a match, walk thru each tagToAdd and add it to tags; 
        // if the tag value is a function then call the function with reGroups
        if (regex.reMatches(name)) do
          tagsToAdd.each((v, n) => do
            if (v.isFunc()) 
              v = v(reGroups(regex, name))
              tags = tags.set(n, v)
            end)
          end
        end)
        // return potentially updated tags
        return tags
      end
    // function to map point list to equip records
    mapPlant: () => do
      // since multiple points might map to one piece of equip,
      // we create an accumulator map of dis-to-record
      
        importedPoints.each row => do
        // parse equip name from path column
        plantName: row->axHistoryId.split("/")[-2].split("_")[-1]
        //   get the site ref     
        site: read(site and dis == siteSel)
        // map string cells to typed tags
        tags: { 
          navName: plantName,
          disMacro:`\$siteRef \$navName`.toStr(),
          siteRef: site->id,
          plant,
        }
        // check if equip name matches one of our regular expressions
        tags = applyTagsByRegex(plantNameToTags, plantName, tags)
        acc = acc.set(tags->navName, tags)
      end
      return acc.vals
    end
    // function to import the equips
    importPlant: () => do
      mapPlant().each row => do 
        // log an info message
        logInfo("import", "Add equip: " + row->navName)
        // filter out any null or empty string tags
        row = row.findAll x => x != null and x != ""
        // check if record esists if not add as new record to the database
        if (read(navName == row["navName"]  and siteRef  == row["siteRef"] ,false) == null) 
           commit(diff(null, row, {add}))
      end    
    end  
    // import files we will use
    hc: read(haystackConn)->id
    importedPoints: hc.haystackReadAll(his and kind == "Number").findAll(row => row->dis.contains(siteSel))
    
    importPlant()       // map points CSV and add equip recs
  acc.vals
  
  end

---