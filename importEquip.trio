
name:importEquip
func
src:
  (siteSel) => do
  
     acc:{}
    // s is site to import the equipment to
      addRec: (msg, tags) => do
  
      // log an info message
      logInfo("import", msg)
  
      // filter out any null or empty string tags
      tags = tags.findAll x => x != null and x != ""
      
            // check if record esists if not add as new record to the database
       if (read(navName == tags["navName"]  and siteRef  == tags["siteRef"] and plantRef == tags["plantRef"],false) == null) 
        do
      commit(diff(null, tags, {add}))
  end
    end
    
    
   
      plantNameToTags: {
      r"ElecMeter":  {elec, meter, siteMeter},
      r"RTU-(\d+)":  {ahu},
      r"AHU(\d+)":  {ahu},
      r"CHW": {chiller}
    }   
      applyTagsByRegex: (mapping, name, tags) => do
        // check for every match in mapping dict of regex:tags
        mapping.each((tagsToAdd,regex) => do
        // we had a match, walk thru each tagToAdd and add it to tags; 
        // if the tag value is a function then call the function with reGroups
        if (regex.reMatches(name)) do
          tagsToAdd.each((v, n) => do
            if (v.isFunc()) 
              v = v(reGroups(regex, name))
              tags = tags.set(n, v)
            end)
          end
        end)
        // return potentially updated tags
        return tags
      end
    // function to map point list to equip records
  
    // function to map point list to point records
    mapPoints: () => do
    //  acc:{}
      pointsFile.each row => do
  
        // parse point name from path column
        plantName: row->axHistoryId.split("/")[-2].split("_")[-1]
        equipName: row->axHistoryId.split("/")[-2].split("_")[-1]
        //pointName: row->dis
  
        // associate with site via storeNum
        site: read(site and dis == siteSel)
  
        // associate with equip via dis
     plant: read(siteRef->dis == siteSel and plant and navName == plantName)
  
  
  
        // map string cells to typed tags
        //f: row[unit]
        //    if(row[unit] != null) echo(row[unit])
        tags: {
          navName:      equipName,
          disMacro: `\$plantRef \$navName`.toStr(),
          siteRef:  site->id,
          plantRef: plant->id,
          equip,
        }
  
        // if kind is Number, we must have unit column
  //      if (tags->kind == "Number")
    //     tags = tags.set("unit", parseUnit(row->unit))
  
        // check if point name matches one of our regular expressions
        tags = applyTagsByRegex(plantNameToTags, equipName, tags)
        acc = acc.set(tags->navName,tags)
      end
      return acc.vals
    end 
    
    // function to import the points
    importEquipsL: () => do
      //echo(mapPoints())
      mapPoints().each row => addRec("Add equip: " + row->navName, row)
    end  
   
    // import files we will use
    hc: read(haystackConn)->id
    // pointsFile: hc.haystackReadAll(point and cur)
     
        pointsFile: hc.haystackReadAll(his and kind == "Number").findAll(row => row->dis.contains(siteSel))
    importEquipsL()       // map points CSV and add points recs
  //  readAll(imported)    // return everything we added
  acc.vals
  end

---